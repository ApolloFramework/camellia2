//
// Â© 2016 UChicago Argonne.  For licensing details, see LICENSE-Camellia in the licenses directory.
//
//
//  MeshTests.cpp
//  Camellia
//
//  Created by Nate Roberts on 2/19/15.
//
//
#include "Teuchos_UnitTestHarness.hpp"

#include "BasisCache.h"
#include "BasisFactory.h"
#include "CamelliaDebugUtility.h"
#include "GDAMinimumRule.h"
#include "GlobalDofAssignment.h"
#include "MeshFactory.h"
#include "MPIWrapper.h"
#include "OldroydBFormulationUWReduced.h"
#include "PoissonFormulation.h"
#include "StokesVGPFormulation.h"

#include <cstdio>

using namespace Camellia;
using namespace Intrepid;

namespace
{
MeshPtr makeTestMesh( int spaceDim, bool spaceTime )
{
  MeshPtr mesh;
  if ((spaceDim == 1) && spaceTime)
  {
    int tensorialDegree = 1;
    CellTopoPtr line_x_time = CellTopology::cellTopology(CellTopology::line(), tensorialDegree);

    vector<double> v00 = {-1,-1};
    vector<double> v10 = { 1,-1};
    vector<double> v20 = { 2,-1};
    vector<double> v01 = {-1, 1};
    vector<double> v11 = { 1, 1};
    vector<double> v21 = { 2, 1};

    vector< vector<double> > spaceTimeVertices;
    spaceTimeVertices.push_back(v00); // 0
    spaceTimeVertices.push_back(v10); // 1
    spaceTimeVertices.push_back(v20); // 2
    spaceTimeVertices.push_back(v01); // 3
    spaceTimeVertices.push_back(v11); // 4
    spaceTimeVertices.push_back(v21); // 5

    vector<IndexType> spaceTimeLine1VertexList;
    vector<IndexType> spaceTimeLine2VertexList;
    spaceTimeLine1VertexList.push_back(0);
    spaceTimeLine1VertexList.push_back(1);
    spaceTimeLine1VertexList.push_back(3);
    spaceTimeLine1VertexList.push_back(4);
    spaceTimeLine2VertexList.push_back(1);
    spaceTimeLine2VertexList.push_back(2);
    spaceTimeLine2VertexList.push_back(4);
    spaceTimeLine2VertexList.push_back(5);

    vector< vector<IndexType> > spaceTimeElementVertices;
    spaceTimeElementVertices.push_back(spaceTimeLine1VertexList);
    spaceTimeElementVertices.push_back(spaceTimeLine2VertexList);

    vector< CellTopoPtr > spaceTimeCellTopos;
    spaceTimeCellTopos.push_back(line_x_time);
    spaceTimeCellTopos.push_back(line_x_time);

    MeshGeometryPtr spaceTimeMeshGeometry = Teuchos::rcp( new MeshGeometry(spaceTimeVertices, spaceTimeElementVertices, spaceTimeCellTopos) );
    MeshTopologyPtr spaceTimeMeshTopology = Teuchos::rcp( new MeshTopology(spaceTimeMeshGeometry) );

    ////////////////////   DECLARE VARIABLES   ///////////////////////
    // define test variables
    VarFactoryPtr varFactory = VarFactory::varFactory();
    VarPtr v = varFactory->testVar("v", HGRAD);

    // define trial variables
    VarPtr uhat = varFactory->fluxVar("uhat");

    ////////////////////   DEFINE BILINEAR FORM   ///////////////////////
    BFPtr bf = BF::bf(varFactory);

    ////////////////////   BUILD MESH   ///////////////////////
    int H1Order = 3, pToAdd = 1;
    mesh = Teuchos::rcp( new Mesh (spaceTimeMeshTopology, bf, H1Order, pToAdd) );
  }
  else if (!spaceTime)
  {
    int H1Order = 2;
    vector<int> elemCounts(spaceDim,2);
    vector<double> dims(spaceDim,1.0);
    
    int spaceDim = 2;
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
  }
  else
  {
    // TODO: handle other space-time mesh options for non-1D spatial meshes
  }
  return mesh;
}
  TEUCHOS_UNIT_TEST( Mesh, ActiveCellOffset )
  {
    MPIWrapper::CommWorld()->Barrier();
    int spaceDim = 2;
    int H1Order = 2;
    vector<int> elemCounts(spaceDim,2);
    vector<double> dims(spaceDim,1.0);
    
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    MeshPtr mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
    
    int expectedActiveCellOffset = 0;
    int myCellCount = mesh->cellIDsInPartition().size();
    mesh->Comm()->ScanSum(&myCellCount, &expectedActiveCellOffset, 1);
    expectedActiveCellOffset -= myCellCount;
    
    int activeCellOffset = mesh->activeCellOffset();
    TEST_EQUALITY(expectedActiveCellOffset, activeCellOffset);
  }

  TEUCHOS_UNIT_TEST( Mesh, ConstructSingleCellMeshSerialComm )
  {
    // the purpose of this test is just to ensure that construction for a serial communicator works
    // without any MPI communication (there used to be some hard-coded MPI_COMM_WORLDs in
    // the mesh partitioning and dof assignments).
    MPIWrapper::CommWorld()->Barrier(); // for setting a breakpoint for debugging
    
    int spaceDim = 2;
    int H1Order = 2;
    vector<int> elemCounts(spaceDim,2);
    vector<double> dims(spaceDim,1.0);
    
    bool conformingTraces = false; // non-conformity allows us to easily determine how many global dofs to expect on the single-element mesh
    PoissonFormulation form(spaceDim,conformingTraces);
    
    MeshPtr originalMesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
    
    GlobalIndexType coarseCellID = *originalMesh->getActiveCellIDsGlobal().begin();
    auto myCellIDs = &originalMesh->cellIDsInPartition();
    
    if (myCellIDs->find(coarseCellID) != myCellIDs->end())
    {
      DofOrderingPtr trialOrdering = originalMesh->getElementType(coarseCellID)->trialOrderPtr;
      int localDofs = trialOrdering->totalDofs();
      
      MeshPtr singleCellMesh = Teuchos::rcp( new Mesh(originalMesh, coarseCellID, MPIWrapper::CommSerial()) );
      
      int globalDofs = singleCellMesh->numGlobalDofs();
      
      TEUCHOS_TEST_EQUALITY(localDofs, globalDofs, out, success);
    }
  }
  
  // until we find a way to simplify this test, commenting it out.  (It's pretty slow!)
//  TEUCHOS_UNIT_TEST( Mesh, EnforceRegularityBigQuadMesh_Slow )
//  {
//    // TODO: find a way to simplify this test
//    int spaceDim = 2;
//    bool conformingTraces = true;
//    int H1Order = 1;
//    int meshWidth = 16;
//    vector<int> elemCounts(spaceDim,meshWidth);
//    vector<double> dims(spaceDim,1.0);
//    PoissonFormulation form(spaceDim,conformingTraces,PoissonFormulation::PRIMAL);
//    MeshPtr mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order, 0, vector<double>(), map<int,int>(),
//                                                map<int,int>(), MPIWrapper::CommWorld());
//
//    int expectedIrregularity = 1;
//    
//    vector<GlobalIndexType> cellsToRefine = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 32, 47, 48, 63, 64, 79, 80, 95, 96, 111, 112, 127, 128, 143, 144, 159, 175, 191, 207, 223, 235, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
//
//    mesh->hRefine(cellsToRefine, false);
//    mesh->enforceOneIrregularity(false);
//    TEST_EQUALITY(mesh->irregularity(), expectedIrregularity);
//    
//    cellsToRefine = {15, 160, 176, 241, 242, 256, 257, 259, 260, 263, 264, 267, 268, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 291, 292, 295, 296, 299, 300, 303, 304, 307, 308, 311, 312, 316, 317, 348, 349, 356, 357, 362, 364, 365, 370, 371, 372, 373, 378, 379, 380, 381, 386, 387, 388, 389, 394, 395, 396, 402, 403, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 446, 447, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499};
//    
//    mesh->hRefine(cellsToRefine, false);
//    mesh->enforceOneIrregularity(false);
//    TEST_EQUALITY(mesh->irregularity(), expectedIrregularity);
//    
//    cellsToRefine = {28, 29, 30, 31, 44, 45, 46, 60, 61, 62, 76, 77, 78, 92, 93, 94, 108, 109, 110, 124, 125, 126, 140, 141, 142, 156, 157, 158, 173, 174, 189, 190, 192, 205, 206, 221, 222, 240, 315, 354, 363, 397, 404, 405, 500, 514, 517, 518, 520, 521, 523, 524, 525, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 576, 579, 580, 583, 592, 595, 596, 599, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 680, 681, 688, 689, 692, 693, 698, 699, 702, 703, 704, 705, 708, 709, 714, 715, 718, 719, 720, 721, 730, 731, 734, 735, 746, 747, 750, 751, 758, 759, 762, 763, 766, 767, 770, 771, 774, 775, 778, 779, 782, 783, 786, 787, 790, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 889, 890, 893, 894, 895, 904, 905, 906, 907, 908, 909, 910, 911, 920, 921, 922, 923, 924, 925, 926, 927, 936, 937, 938, 939, 940, 941, 942, 943, 946, 947};
//    
//    mesh->hRefine(cellsToRefine, false);
//    mesh->enforceOneIrregularity(false);
//    TEST_EQUALITY(mesh->irregularity(), expectedIrregularity);
//    
//    cellsToRefine = {25, 26, 27, 41, 42, 43, 57, 58, 59, 73, 74, 75, 90, 91, 106, 107, 121, 122, 123, 137, 138, 139, 151, 152, 153, 154, 155, 166, 167, 168, 169, 170, 171, 172, 181, 182, 183, 184, 185, 186, 187, 188, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 355, 502, 503, 504, 505, 508, 513, 686, 687, 724, 725, 736, 737, 740, 741, 752, 962, 963, 1098, 1100, 1103, 1106, 1107, 1110, 1111, 1124, 1129, 1130, 1133, 1134, 1137, 1138, 1140, 1141, 1143, 1144, 1145, 1148, 1151, 1152, 1153, 1156, 1157, 1160, 1163, 1164, 1167, 1168, 1171, 1172, 1175, 1176, 1179, 1180, 1183, 1184, 1187, 1188, 1191, 1192, 1195, 1196, 1199, 1200, 1203, 1204, 1207, 1208, 1211, 1212, 1215, 1216, 1219, 1220, 1223, 1224, 1227, 1228, 1231, 1232, 1235, 1236, 1239, 1240, 1243, 1244, 1247, 1248, 1251, 1252, 1255, 1256, 1259, 1260, 1263, 1264, 1267, 1268, 1271, 1272, 1275, 1276, 1279, 1280, 1283, 1284, 1287, 1288, 1291, 1292, 1295, 1296, 1299, 1300, 1303, 1304, 1307, 1308, 1311, 1312, 1315, 1316, 1319, 1320, 1323, 1324, 1327, 1328, 1331, 1332, 1335, 1336, 1339, 1340, 1343, 1344, 1347, 1348, 1351, 1352, 1355, 1356, 1359, 1360, 1363, 1364, 1367, 1368, 1371, 1372, 1375, 1376, 1379, 1380, 1383, 1384, 1385, 1388, 1389, 1392, 1393, 1396, 1397, 1400, 1401, 1404, 1405, 1408, 1409, 1412, 1413, 1416, 1417, 1420, 1421, 1424, 1425, 1428, 1429, 1432, 1433, 1436, 1437, 1450, 1451, 1454, 1455, 1458, 1482, 1483, 1486, 1487, 1490, 1491, 1494, 1495, 1506, 1507, 1510, 1511, 1514, 1515, 1518, 1519, 1522, 1523, 1526, 1527, 1530, 1531, 1534, 1535, 1538, 1539, 1542, 1543, 1546, 1547, 1550, 1551, 1554, 1555, 1558, 1559, 1562, 1563, 1566, 1567, 1570, 1571, 1574, 1575, 1578, 1579, 1582, 1583, 1586, 1587, 1590, 1591, 1594, 1595, 1598, 1599, 1602, 1603, 1606, 1607, 1610, 1611, 1614, 1615, 1618, 1619, 1622, 1623, 1626, 1627, 1630, 1631, 1634, 1635, 1638, 1639, 1642, 1643, 1646, 1647, 1649, 1650, 1653, 1654, 1657, 1658, 1661, 1662, 1665, 1666, 1669, 1670, 1673, 1674, 1677, 1678, 1681, 1682, 1685, 1686, 1689, 1690, 1693, 1694, 1697, 1698, 1701, 1702, 1705, 1706, 1709, 1710, 1713, 1714, 1717, 1718, 1721, 1722, 1725, 1726, 1729, 1730, 1733, 1734, 1737, 1738, 1741, 1742, 1745, 1746, 1749, 1750, 1753, 1754, 1757, 1758, 1761, 1762, 1765, 1766, 1769, 1770, 1773, 1774, 1777, 1778, 1781, 1782, 1785, 1786, 1789, 1790, 1793, 1794, 1797, 1798, 1801, 1802, 1805, 1806, 1817, 1818, 1820, 1821, 1822, 1823, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1906, 1907, 1910, 1911, 1914, 1915};
//    
//    mesh->hRefine(cellsToRefine, false);
//    mesh->enforceOneIrregularity(false);
//    TEST_EQUALITY(mesh->irregularity(), expectedIrregularity);
//    
//    cellsToRefine = {};
//    
//    mesh->hRefine(cellsToRefine, false);
//    mesh->enforceOneIrregularity(false);
//    TEST_EQUALITY(mesh->irregularity(), expectedIrregularity);
//    
//    cellsToRefine = {37, 38, 39, 51, 52, 53, 54, 55, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 97, 98, 99, 113, 114, 129, 130, 145, 294, 297, 298, 301, 313, 314, 352, 353, 360, 369, 376, 377, 384, 385, 392, 406, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 501, 506, 507, 509, 510, 511, 512, 515, 516, 519, 949, 950, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1024, 1025, 1026, 1027, 1036, 1037, 1048, 1049, 1076, 1077, 1078, 1079, 1080, 1081, 1088, 1089, 1096, 1097, 1099, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2122, 2123, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2224, 2289, 2950, 2951, 2954, 2955, 2958, 2959, 2962, 2963, 2966, 2967, 2991, 2994, 2995, 2998, 2999, 3816, 3820, 3824, 3832, 3846, 3847, 3848, 3870, 3871, 3872, 3896, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3944, 3946, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3965, 3966, 3968, 3969, 3970, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 4324, 4327, 4346, 4347, 4350, 4351, 4354, 4355, 4386, 4387, 4390, 4391, 4394, 4395, 4398, 4399, 4402, 4403, 4406, 4407, 4409, 4410, 4413, 4414, 4418, 4419, 4422, 4423, 4426, 4427, 4430, 4431, 4434, 4435, 4438, 4439, 4442, 4443, 4446, 4447, 4449, 4450, 4452, 4455, 4456, 4459, 4460, 4463, 4464, 4467, 4470, 4471, 4486, 4487, 4490, 4491, 4494, 4495, 4498, 4499, 4500, 4503, 4504, 4507, 4509, 4510, 4513, 4514, 4517, 4518, 4521, 4522, 4525, 4526, 4529, 4530, 4533, 4534, 4537, 4538, 4541, 4542, 4545, 4546, 4549, 4550, 4553, 4554, 4564, 4567, 4576, 4579, 4580, 4583, 4600, 4603, 4604, 4607, 4608, 4611, 4612, 4615, 4648, 4651, 4652, 4655, 4656, 4659, 4660, 4663, 4664, 4667, 4668, 4671, 4672, 4675, 4676, 4679, 4680, 4683, 4684, 4687, 4688, 4691, 4692, 4695, 4696, 4699, 4700, 4703, 4704, 4707, 4708, 4711, 4712, 4715, 4716, 4719, 4720, 4723, 4724, 4727, 4728, 4731, 4732, 4735, 4736, 4739, 4740, 4743, 4744, 4747, 4748, 4751, 4752, 4755, 4756, 4759, 4760, 4763, 4764, 4767, 4768, 4771, 4772, 4775, 4776, 4779, 4780, 4783, 4784, 4787, 4788, 4791, 4792, 4795, 4796, 4799, 4800, 4803, 4804, 4807, 4808, 4811, 4812, 4815, 4816, 4819, 4820, 4823, 4824, 4827, 4828, 4831, 4832, 4835, 4836, 4839, 4840, 4843, 4844, 4847, 4848, 4851, 4852, 4855, 4856, 4859, 4860, 4863, 4864, 4867, 4868, 4871, 4872, 4875, 4876, 4879, 4880, 4883, 4884, 4887, 4888, 4891, 4892, 4895, 4896, 4899, 4900, 4903, 4904, 4907, 4908, 4911, 4912, 4915, 4916, 4919, 4920, 4923, 4924, 4927, 4928, 4931, 4932, 4935, 4936, 4939, 4940, 4943, 4944, 4947, 4948, 4951, 4952, 4955, 4956, 4959, 4960, 4963, 4964, 4967, 4968, 4971, 4972, 4975, 4976, 4979, 4980, 4983, 4984, 4987, 4988, 4991, 4992, 4995, 4996, 4999, 5000, 5003, 5004, 5007, 5008, 5011, 5012, 5015, 5016, 5019, 5020, 5023, 5024, 5027, 5028, 5031, 5032, 5035, 5036, 5039, 5040, 5043, 5044, 5047, 5048, 5051, 5052, 5055, 5056, 5059, 5060, 5063, 5064, 5067, 5068, 5071, 5072, 5075, 5076, 5079, 5080, 5083, 5084, 5087, 5088, 5091, 5092, 5095, 5096, 5099, 5100, 5103, 5104, 5107, 5108, 5111, 5112, 5115, 5116, 5119, 5120, 5123, 5124, 5127, 5128, 5131, 5132, 5135, 5136, 5139, 5140, 5143, 5144, 5147, 5148, 5151, 5152, 5155, 5156, 5159, 5160, 5163, 5164, 5167, 5168, 5171, 5172, 5175, 5176, 5179, 5180, 5183, 5184, 5187, 5188, 5191, 5192, 5195, 5196, 5199, 5200, 5203, 5204, 5207, 5208, 5211, 5212, 5215, 5216, 5219, 5220, 5223, 5224, 5227, 5228, 5231, 5232, 5235, 5236, 5239, 5240, 5243, 5244, 5247, 5248, 5251, 5252, 5255, 5256, 5259, 5260, 5263, 5264, 5267, 5268, 5271, 5272, 5275, 5276, 5279, 5280, 5283, 5284, 5287, 5288, 5291, 5292, 5295, 5296, 5299, 5300, 5303, 5304, 5307, 5308, 5311, 5312, 5315, 5316, 5319, 5320, 5323, 5324, 5327, 5328, 5331, 5332, 5335, 5336, 5339, 5340, 5343, 5344, 5347, 5348, 5351, 5352, 5355, 5356, 5359, 5360, 5363, 5364, 5367, 5368, 5371, 5372, 5375, 5376, 5379, 5380, 5383, 5384, 5387, 5388, 5391, 5392, 5395, 5396, 5399, 5400, 5403, 5404, 5407, 5408, 5411, 5412, 5415, 5416, 5419, 5420, 5423, 5424, 5427, 5428, 5431, 5432, 5435, 5436, 5439, 5440, 5443, 5444, 5447, 5448, 5451, 5452, 5455, 5456, 5459, 5460, 5463, 5464, 5467, 5468, 5471, 5472, 5475, 5476, 5479, 5480, 5483, 5484, 5487, 5488, 5491, 5492, 5495, 5496, 5499, 5500, 5503, 5504, 5507, 5508, 5511, 5512, 5515, 5516, 5519, 5520, 5523, 5524, 5527, 5528, 5531, 5532, 5535, 5536, 5539, 5540, 5543, 5590, 5591, 5594, 5595, 5598, 5599, 5602, 5603, 5606, 5631, 5634, 5635, 5638, 5639, 5642, 5643, 5646, 5647, 5650, 5651, 5654, 5655, 5658, 5659, 5662, 5663, 5666, 5667, 5670, 5671, 5674, 5675, 5678, 5679, 5682, 5683, 5686, 5687, 5690, 5691, 5694, 5695, 5698, 5699, 5702, 5703, 5706, 5707, 5710, 5711, 5714, 5715, 5718, 5719, 5722, 5723, 5726, 5727, 5730, 5731, 5734, 5735, 5738, 5739, 5742, 5743, 5746, 5747, 5750, 5751, 5754, 5755, 5758, 5759, 5762, 5763, 5766, 5767, 5770, 5771, 5774, 5775, 5778, 5779, 5782, 5783, 5786, 5787, 5790, 5791, 5794, 5795, 5798, 5799, 5802, 5803, 5806, 5807, 5810, 5811, 5814, 5815, 5818, 5819, 5822, 5823, 5826, 5827, 5830, 5831, 5834, 5835, 5838, 5839, 5842, 5843, 5846, 5847, 5850, 5851, 5854, 5855, 5858, 5859, 5862, 5863, 5866, 5867, 5870, 5871, 5874, 5875, 5878, 5879, 5882, 5883, 5886, 5887, 5890, 5891, 5894, 5895, 5898, 5899, 5902, 5903, 5906, 5907, 5910, 5911, 5914, 5915, 5918, 5919, 5922, 5923, 5926, 5927, 5930, 5931, 5934, 5935, 5938, 5939, 5942, 5943, 5946, 5947, 5950, 5951, 5954, 5955, 5958, 5959, 5962, 5963, 5966, 5967, 5970, 5971, 5974, 5975, 5978, 5979, 5982, 5983, 5986, 5987, 5990, 5991, 5994, 5995, 5998, 5999, 6002, 6003, 6006, 6007, 6010, 6011, 6014, 6015, 6018, 6019, 6022, 6023, 6026, 6027, 6030, 6031, 6034, 6035, 6038, 6039, 6042, 6043, 6046, 6047, 6050, 6051, 6054, 6055, 6058, 6059, 6062, 6063, 6066, 6067, 6070, 6071, 6074, 6075, 6078, 6079, 6082, 6083, 6086, 6087, 6090, 6091, 6094, 6095, 6098, 6099, 6102, 6103, 6106, 6107, 6110, 6111, 6114, 6115, 6118, 6119, 6122, 6123, 6126, 6127, 6130, 6131, 6134, 6135, 6138, 6139, 6142, 6143, 6146, 6147, 6150, 6151, 6154, 6155, 6158, 6159, 6162, 6163, 6166, 6167, 6170, 6171, 6174, 6175, 6178, 6179, 6182, 6183, 6186, 6187, 6190, 6191, 6194, 6195, 6198, 6199, 6202, 6203, 6206, 6207, 6209, 6210, 6213, 6214, 6217, 6218, 6221, 6222, 6225, 6226, 6229, 6230, 6233, 6234, 6237, 6238, 6241, 6242, 6245, 6246, 6249, 6250, 6253, 6254, 6257, 6258, 6261, 6262, 6265, 6266, 6269, 6270, 6273, 6274, 6277, 6278, 6281, 6282, 6285, 6286, 6289, 6290, 6293, 6294, 6297, 6298, 6301, 6302, 6305, 6306, 6309, 6310, 6313, 6314, 6317, 6318, 6321, 6322, 6325, 6326, 6329, 6330, 6333, 6334, 6337, 6338, 6341, 6342, 6345, 6346, 6349, 6350, 6353, 6354, 6357, 6358, 6361, 6362, 6365, 6366, 6369, 6370, 6373, 6374, 6377, 6378, 6381, 6382, 6385, 6386, 6389, 6390, 6393, 6394, 6397, 6398, 6401, 6402, 6405, 6406, 6409, 6410, 6413, 6414, 6417, 6418, 6421, 6422, 6425, 6426, 6429, 6430, 6433, 6434, 6437, 6438, 6441, 6442, 6445, 6446, 6449, 6450, 6453, 6454, 6457, 6458, 6461, 6462, 6465, 6466, 6469, 6470, 6473, 6474, 6477, 6478, 6481, 6482, 6485, 6486, 6489, 6490, 6493, 6494, 6497, 6498, 6501, 6502, 6505, 6506, 6509, 6510, 6513, 6514, 6517, 6518, 6521, 6522, 6525, 6526, 6529, 6530, 6533, 6534, 6537, 6538, 6541, 6542, 6545, 6546, 6549, 6550, 6553, 6554, 6557, 6558, 6561, 6562, 6565, 6566, 6569, 6570, 6573, 6574, 6577, 6578, 6581, 6582, 6585, 6586, 6589, 6590, 6593, 6594, 6597, 6598, 6601, 6602, 6605, 6606, 6609, 6610, 6613, 6614, 6617, 6618, 6621, 6622, 6625, 6626, 6629, 6630, 6633, 6634, 6637, 6638, 6641, 6642, 6645, 6646, 6649, 6650, 6653, 6654, 6657, 6658, 6661, 6662, 6665, 6666, 6669, 6670, 6673, 6674, 6677, 6678, 6681, 6682, 6685, 6686, 6689, 6690, 6693, 6694, 6697, 6698, 6701, 6702, 6705, 6706, 6709, 6710, 6713, 6714, 6717, 6718, 6721, 6722, 6725, 6726, 6729, 6730, 6733, 6734, 6737, 6738, 6741, 6742, 6745, 6746, 6749, 6750, 6753, 6754, 6757, 6758, 6761, 6762, 6765, 6766, 6769, 6770, 6773, 6774, 6777, 6778, 6781, 6782, 6785, 6786, 6789, 6790, 6793, 6794, 6797, 6798, 6801, 6802, 6805, 6806, 6809, 6810, 6813, 6814, 6817, 6818, 6821, 6822, 6825, 6826, 6829, 6830, 6833, 6834, 6837, 6838, 6841, 6842, 6845, 6846, 6849, 6850, 6853, 6854, 6857, 6858, 6861, 6862, 6865, 6866, 6869, 6870, 6873, 6874, 6877, 6878, 6881, 6882, 6885, 6886, 6889, 6890, 6893, 6894, 6897, 6898, 6901, 6902, 6905, 6906, 6909, 6910, 6913, 6914, 6917, 6918, 6921, 6922, 6925, 6926, 6929, 6930, 6933, 6934, 6937, 6938, 6941, 6942, 6945, 6946, 6949, 6950, 6953, 6954, 6957, 6958, 6961, 6962, 6965, 6966, 6969, 6970, 6973, 6974, 6977, 6978, 6981, 6982, 6985, 6986, 6989, 6990, 6993, 6994, 6997, 6998, 7005, 7006, 7009, 7010, 7021, 7022, 7025, 7026, 7037, 7038, 7041, 7042, 7053, 7054, 7057, 7058, 7069, 7070, 7073, 7074, 7075, 7078, 7079, 7082, 7083, 7086, 7087, 7090, 7091, 7094, 7095, 7098, 7099, 7102, 7103, 7106, 7107, 7110, 7111, 7114, 7115, 7118, 7119, 7122, 7123, 7126, 7127, 7130, 7131, 7134, 7135};
//    
//    mesh->hRefine(cellsToRefine, false);
//    mesh->enforceOneIrregularity(false);
//    TEST_EQUALITY(mesh->irregularity(), expectedIrregularity);
//    
//    cellsToRefine = {33, 34, 35, 36, 49, 50, 65, 286, 289, 290, 293, 302, 305, 306, 309, 310, 340, 341, 342, 343, 344, 345, 346, 347, 361, 366, 368, 374, 375, 382, 383, 390, 391, 398, 399, 407, 684, 700, 764, 765, 769, 772, 773, 776, 777, 780, 781, 784, 785, 788, 789, 792, 793, 796, 797, 800, 801, 804, 805, 808, 809, 812, 815, 816, 819, 820, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 891, 892, 896, 897, 898, 899, 900, 901, 902, 903, 912, 913, 914, 915, 916, 917, 918, 919, 928, 929, 930, 931, 932, 933, 934, 935, 944, 945, 948, 951, 952, 953, 954, 955, 971, 972, 1118, 1123, 1128, 1136, 1139, 1916, 1917, 1928, 1929, 1940, 1952, 1980, 2225, 2240, 2243, 3817, 3818, 3819, 3821, 3822, 3823, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3942, 3943, 3945, 3947, 3948, 3949, 3950, 3951, 3964, 3967, 3971, 3989, 3990, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4106, 4107, 4108, 4109, 4110, 4111, 4114, 4117, 4118, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4174, 4175, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4377, 4474, 4475, 4478, 4479, 4482, 4483, 5607, 5610, 5611, 5614, 5615, 5618, 5619, 5622, 5623, 5626, 5627, 5630, 7072, 7076, 7077, 7080, 7081, 7084, 7085, 7088, 7089, 7092, 7093, 7096, 7097, 7100, 7101, 7104, 7105, 7109, 7113, 7136, 7137, 7138, 7140, 7141, 7142, 7143, 7144, 7145, 7146, 7147, 7148, 7149, 7152, 7153, 7154, 7156, 7157, 7158, 7159, 7160, 7161, 7162, 7163, 7164, 7165, 7166, 7167, 7168, 7169, 7172, 7173, 7174, 7175, 7176, 7177, 7178, 7179, 7180, 7181, 7182, 7183, 7184, 7185, 7186, 7187, 7188, 7189, 7192, 7193, 7194, 7195, 7196, 7197, 7198, 7199, 7200, 7201, 7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226, 7227, 7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7300, 7303, 7304, 7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314, 7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325, 7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7348, 7349, 7350, 7351, 7352, 7353, 7354, 7357, 7365, 7366, 7369, 7370, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7401, 7402, 7403, 7404, 7405, 7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413, 7414, 7415, 7416, 7417, 7418, 7419, 7431, 7444, 7445, 7446, 7452, 7454, 7455, 7456, 7457, 7458, 7459, 7468, 7528, 7574, 7626, 7740, 7741, 7742, 7743, 7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7760, 7761, 7762, 7763, 7996, 8004, 8270, 8271, 8272, 8273, 8274, 8275, 8277, 8278, 8279, 8385, 8386, 8387, 8392, 8393, 8394, 8395, 8396, 8397, 8398, 8399, 8400, 8401, 8402, 8403, 8404, 8405, 8406, 8407, 8497, 8498, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8522, 8524, 8525, 8526, 8527, 8528, 8529, 8530, 8531, 8532, 8533, 8534, 8535, 8536, 8537, 8538, 8539, 8540, 8541, 8542, 8543, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8566, 8567, 8570, 8573, 8576, 8577, 8578, 8579, 8581, 8673, 8674, 8677, 8678, 8686, 8688, 8689, 8690, 8691, 8692, 8693, 8694, 8695, 8696, 8697, 8698, 8699, 8700, 8701, 8702, 8703, 8704, 8705, 8706, 8707, 8708, 8709, 8710, 8711, 8712, 8713, 8714, 8715, 8716, 8717, 8718, 8719, 8720, 8721, 8722, 8723, 8724, 8725, 8726, 8727, 8728, 8729, 8730, 8731, 8732, 8733, 8734, 8735, 8736, 8737, 8738, 8739, 8740, 8741, 8742, 8743, 8744, 8745, 8746, 8747, 8748, 8749, 8752, 8753, 8778, 8779, 8780, 8781, 8782, 8783, 8784, 8785, 8786, 8787, 8788, 8789, 8790, 8791, 8792, 8793, 8794, 8795, 8797, 8800, 8801, 8802, 8850, 8853, 8854, 8869, 8870, 8871, 8874, 8876, 8877, 8878, 8879, 8880, 8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888, 8889, 8890, 8891, 8892, 8893, 8894, 8895, 8896, 8897, 8898, 8899, 8900, 8901, 8902, 8903, 8904, 8905, 8906, 8907, 8908, 8909, 8910, 8911, 8912, 8913, 8914, 8915, 8916, 8917, 8918, 8919, 8920, 8921, 8922, 8923, 8924, 8929, 8930, 8934, 8935, 8938, 8939, 8942, 8943, 8946, 8947, 8950, 8951, 8954, 8955, 8958, 8959, 8962, 8963, 8966, 8967, 8970, 8971, 8974, 8975, 8978, 8979, 8982, 8983, 8986, 8987, 8990, 8991, 9008, 9012, 9020, 9024, 9034, 9036, 9044, 9048, 9064, 9072, 9076, 9080, 9099, 9102, 9105, 9106, 9108, 9109, 9110, 9111, 9112, 9116, 9124, 9147, 9156, 9159, 9164, 9168, 9169, 9171, 9172, 9180, 9244, 9247, 9248, 9251, 9254, 9255, 9258, 9259, 9262, 9263, 9266, 9267, 9270, 9271, 9274, 9275, 9278, 9279, 9282, 9283, 9286, 9287, 9290, 9291, 9294, 9295, 9298, 9299, 9325, 9326, 9329, 9330, 9333, 9334, 9337, 9338, 9342, 9343, 9346, 9347, 9350, 9351, 9354, 9355, 9358, 9359, 9362, 9363, 9366, 9367, 9370, 9371, 9374, 9375, 9378, 9379, 9382, 9383, 9386, 9387, 9390, 9391, 9394, 9395, 9398, 9399, 9402, 9403, 9405, 9406, 9409, 9410, 9412, 9415, 9416, 9419, 9420, 9423, 9424, 9427, 9428, 9431, 9432, 9435, 9436, 9439, 9440, 9443, 9446, 9447, 9451, 9454, 9455, 9458, 9459, 9462, 9463, 9466, 9467, 9470, 9471, 9474, 9475, 9478, 9479, 9482, 9483, 9484, 9487, 9488, 9491, 9492, 9495, 9496, 9501, 9502, 9505, 9506, 9509, 9510, 9513, 9514, 9517, 9518, 9521, 9522, 9525, 9526, 9529, 9530, 9533, 9534, 9537, 9538, 9541, 9542, 9545, 9546, 9549, 9550, 9553, 9554, 9557, 9558, 9561, 9562, 9565, 9566, 9569, 9570, 9573, 9574, 9577, 9578, 9581, 9582, 9585, 9586, 9589, 9590, 9593, 9594, 9964, 9967, 9968, 9971, 9972, 9975, 9976, 9979, 9980, 9983, 9984, 9987, 9988, 9991, 9992, 9995, 9996, 9999, 10000, 10003, 10004, 10007, 10008, 10011, 10012, 10015, 10016, 10019, 10020, 10023, 10024, 10027, 10028, 10031, 10032, 10035, 10036, 10039, 10040, 10043, 10044, 10047, 10048, 10051, 10052, 10055, 10056, 10059, 10060, 10063, 10064, 10067, 10068, 10071, 10072, 10075, 10076, 10079, 10080, 10083, 10084, 10087, 10088, 10091, 10092, 10095, 10096, 10099, 10100, 10103, 10104, 10107, 10108, 10111, 10112, 10115, 10116, 10119, 10120, 10123, 10124, 10127, 10128, 10131, 10132, 10135, 10136, 10139, 10140, 10143, 10144, 10147, 10148, 10151, 10152, 10155, 10156, 10159, 10160, 10163, 10164, 10167, 10168, 10171, 10172, 10175, 10176, 10179, 10180, 10183, 10184, 10187, 10188, 10191, 10192, 10195, 10196, 10199, 10200, 10203, 10204, 10207, 10208, 10211, 10212, 10215, 10216, 10219, 10220, 10223, 10224, 10227, 10228, 10231, 10232, 10235, 10236, 10239, 10240, 10243, 10244, 10247, 10248, 10251, 10252, 10255, 10256, 10259, 10260, 10263, 10264, 10267, 10268, 10271, 10272, 10275, 10276, 10279, 10280, 10283, 10284, 10287, 10288, 10291, 10292, 10295, 10296, 10299, 10300, 10303, 10304, 10307, 10308, 10311, 10312, 10315, 10316, 10319, 10320, 10323, 10324, 10327, 10328, 10331, 10332, 10335, 10336, 10339, 10340, 10343, 10344, 10347, 10348, 10351, 10352, 10355, 10356, 10359, 10360, 10363, 10364, 10367, 10368, 10371, 10372, 10375, 10376, 10379, 10380, 10383, 10384, 10387, 10388, 10391, 10392, 10395, 10396, 10399, 10400, 10403, 10404, 10407, 10408, 10411, 10412, 10415, 10416, 10419, 10420, 10423, 10424, 10427, 10428, 10431, 10432, 10435, 10436, 10439, 10440, 10443, 10444, 10447, 10448, 10451, 10452, 10455, 10456, 10459, 10460, 10463, 10464, 10467, 10468, 10471, 10472, 10475, 10476, 10479, 10480, 10483, 10484, 10487, 10488, 10491, 10492, 10495, 10496, 10499, 10500, 10503, 10504, 10507, 10508, 10511, 10512, 10515, 10516, 10519, 10520, 10523, 10524, 10527, 10528, 10531, 10532, 10535, 10536, 10539, 10540, 10543, 10544, 10547, 10548, 10551, 10552, 10555, 10556, 10559, 10560, 10563, 10564, 10567, 10568, 10571, 10572, 10575, 10576, 10579, 10580, 10583, 10584, 10587, 10588, 10591, 10592, 10595, 10596, 10599, 10600, 10603, 10604, 10607, 10608, 10611, 10612, 10615, 10616, 10619, 10620, 10623, 10624, 10627, 10628, 10631, 10632, 10635, 10636, 10639, 10640, 10643, 10644, 10647, 10648, 10651, 10652, 10655, 10656, 10659, 10660, 10663, 10664, 10667, 10668, 10671, 10672, 10675, 10676, 10679, 10680, 10683, 10684, 10687, 10688, 10691, 10692, 10695, 10696, 10699, 10700, 10703, 10704, 10707, 10708, 10711, 10712, 10715, 10716, 10719, 10720, 10723, 10724, 10727, 10728, 10731, 10732, 10735, 10736, 10739, 10740, 10743, 10744, 10747, 10748, 10751, 10752, 10755, 10756, 10759, 10760, 10763, 10764, 10767, 10768, 10771, 10772, 10775, 10776, 10779, 10780, 10783, 10784, 10787, 10788, 10791, 10792, 10795, 10796, 10799, 10800, 10803, 10804, 10807, 10808, 10811, 10812, 10815, 10816, 10819, 10820, 10823, 10824, 10827, 10828, 10831, 10832, 10835, 10836, 10839, 10840, 10843, 10844, 10847, 10848, 10851, 10852, 10855, 10856, 10859, 10860, 10863, 10864, 10867, 10868, 10871, 10872, 10875, 10876, 10879, 10880, 10883, 10884, 10887, 10888, 10891, 10892, 10895, 10896, 10899, 10900, 10903, 10904, 10907, 10908, 10911, 10912, 10915, 10916, 10919, 10920, 10923, 10924, 10927, 10928, 10931, 10932, 11284, 11287, 11288, 11291, 11292, 11295, 11296, 11299, 11300, 11303, 11304, 11307, 11308, 11311, 11312, 11315, 11316, 11319, 11320, 11323, 11324, 11327, 11328, 11331, 11332, 11335, 11336, 11339, 11340, 11343, 11344, 11347, 11348, 11351, 11352, 11355, 11356, 11359, 11360, 11363, 11364, 11367, 11368, 11371, 11372, 11375, 11376, 11379, 11380, 11383, 11384, 11387, 11388, 11391, 11392, 11395, 11396, 11399, 11400, 11403, 11404, 11407, 11408, 11411, 11412, 11415, 11416, 11419, 11436, 11439, 11440, 11479, 11481, 11482, 11483, 11486, 11487, 11490, 11491, 11494, 11495, 11498, 11499, 11502, 11503, 11506, 11507, 11510, 11511, 11514, 11515, 11518, 11519, 11522, 11523, 11526, 11527, 11530, 11531, 11534, 11535, 11538, 11539, 11542, 11543, 11546, 11547, 11550, 11551, 11554, 11555, 11558, 11559, 11562, 11563, 11566, 11567, 11570, 11571, 11574, 11575, 11578, 11579, 11582, 11583, 11586, 11587, 11590, 11591, 11594, 11595, 11598, 11599, 11602, 11603, 11606, 11607, 11614, 11615, 11618, 11619, 11622, 11623, 11626, 11627, 11630, 11631, 11634, 11635, 11638, 11639, 11642, 11643, 11646, 11647, 11650, 11651, 11654, 11655, 11658, 11659, 11662, 11663, 11666, 11667, 11670, 11671, 11674, 11675, 11678, 11679, 11682, 11683, 11686, 11687, 11690, 11691, 11694, 11695, 11698, 11699, 11702, 11703, 11706, 11707, 11710, 11711, 11714, 11715, 11718, 11719, 11722, 11723, 11726, 11727, 11730, 11731, 11734, 11735, 11738, 11739, 11742, 11743, 11746, 11747, 11750, 11751, 11754, 11755, 11758, 11759, 11762, 11763, 11766, 11767, 11770, 11771, 11774, 11775, 11778, 11779, 11782, 11783, 11786, 11787, 11790, 11791, 11794, 11795, 11798, 11799, 11802, 11803, 11806, 11807, 11810, 11811, 11814, 11815, 11818, 11819, 11822, 11823, 11826, 11827, 11830, 11831, 11834, 11835, 11838, 11839, 11842, 11843, 11846, 11847, 11850, 11851, 11854, 11855, 11858, 11859, 11862, 11863, 11866, 11867, 11870, 11871, 11874, 11875, 11878, 11879, 11882, 11883, 11886, 11887, 11890, 11891, 11894, 11895, 11898, 11899, 11902, 11903, 11906, 11907, 11910, 11911, 11914, 11915, 11918, 11919, 11922, 11923, 11926, 11927, 11930, 11931, 11934, 11935, 11938, 11939, 11942, 11943, 11946, 11947, 11950, 11951, 11954, 11955, 11958, 11959, 11962, 11963, 11966, 11967, 11970, 11971, 11974, 11975, 11978, 11979, 11982, 11983, 11986, 11987, 11990, 11991, 11994, 11995, 11998, 11999, 12002, 12003, 12006, 12007, 12010, 12011, 12014, 12015, 12018, 12019, 12022, 12023, 12026, 12027, 12030, 12031, 12034, 12035, 12038, 12039, 12042, 12043, 12046, 12047, 12050, 12051, 12054, 12055, 12058, 12059, 12062, 12063, 12066, 12067, 12070, 12071, 12074, 12075, 12078, 12079, 12082, 12083, 12086, 12087, 12090, 12091, 12094, 12095, 12098, 12099, 12102, 12103, 12106, 12107, 12110, 12111, 12114, 12115, 12118, 12119, 12122, 12123, 12126, 12127, 12130, 12131, 12134, 12135, 12138, 12139, 12142, 12143, 12146, 12147, 12150, 12151, 12154, 12155, 12158, 12159, 12162, 12163, 12166, 12167, 12170, 12171, 12174, 12175, 12178, 12179, 12182, 12183, 12186, 12187, 12190, 12191, 12194, 12195, 12198, 12199, 12202, 12203, 12206, 12207, 12210, 12211, 12214, 12215, 12218, 12219, 12222, 12223, 12226, 12227, 12230, 12231, 12234, 12235, 12238, 12239, 12242, 12243, 12246, 12247, 12250, 12251, 12254, 12255, 12258, 12259, 12262, 12263, 12266, 12267, 12270, 12271, 12274, 12275, 12278, 12279, 12282, 12283, 12286, 12287, 12290, 12291, 12294, 12295, 12298, 12299, 12302, 12303, 12306, 12307, 12310, 12311, 12314, 12315, 12318, 12319, 12322, 12323, 12326, 12327, 12330, 12331, 12334, 12335, 12338, 12339, 12342, 12343, 12346, 12347, 12350, 12351, 12354, 12355, 12358, 12359, 12362, 12363, 12366, 12367, 12370, 12371, 12374, 12375, 12378, 12379, 12382, 12383, 12386, 12387, 12390, 12391, 12394, 12395, 12398, 12399, 12402, 12403, 12406, 12407, 12410, 12411, 12414, 12415, 12418, 12419, 12422, 12423, 12426, 12427, 12430, 12431, 12434, 12435, 12438, 12439, 12442, 12443, 12446, 12447, 12450, 12451, 12454, 12455, 12458, 12459, 12462, 12463, 12466, 12467, 12470, 12471, 12474, 12475, 12478, 12479, 12482, 12483, 12486, 12487, 12490, 12491, 12494, 12495, 12498, 12499, 12502, 12503, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529, 12530, 12531, 12532, 12533, 12534, 12535, 12536, 12537, 12538, 12539, 12540, 12541, 12542, 12543, 12545, 12546, 12547, 12550, 12551, 12554, 12555, 12558, 12559, 12562, 12563, 12566, 12567, 12570, 12571, 12574, 12575, 12578, 12579, 12582, 12583, 12586, 12587, 12590, 12591, 12594, 12595, 12598, 12599, 12602, 12603, 12606, 12607, 12610, 12611, 12614, 12615, 12618, 12619, 12622, 12623, 12626, 12627, 12630, 12631, 12634, 12635, 12637, 12638, 12641, 12642, 12645, 12646, 12649, 12650, 12653, 12654, 12657, 12658, 12661, 12662, 12665, 12666, 12669, 12670, 12673, 12674, 12677, 12678, 12681, 12682, 12685, 12686, 12689, 12690, 12693, 12694, 12697, 12698, 12701, 12702, 12705, 12706, 12709, 12710, 12713, 12714, 12717, 12718, 12721, 12722, 12725, 12726, 12729, 12730, 12733, 12734, 12737, 12738, 12741, 12742, 12745, 12746, 12749, 12750, 12753, 12754, 12757, 12758, 12761, 12762, 12765, 12766, 12769, 12770, 12773, 12774, 12777, 12778, 12781, 12782, 12785, 12786, 12789, 12790, 12793, 12794, 12797, 12798, 12801, 12802, 12805, 12806, 12809, 12810, 12813, 12814, 12817, 12818, 12821, 12822, 12825, 12826, 12829, 12830, 12833, 12834, 12837, 12838, 12841, 12842, 12845, 12846, 12849, 12850, 12853, 12854, 12857, 12858, 12861, 12862, 12865, 12866, 12869, 12870, 12873, 12874, 12877, 12878, 12881, 12882, 12885, 12886, 12889, 12890, 12893, 12894, 12897, 12898, 12901, 12902, 12905, 12906, 12909, 12910, 12913, 12914, 12917, 12918, 12921, 12922, 12925, 12926, 12929, 12930, 12933, 12934, 12937, 12938, 12941, 12942, 12945, 12946, 12949, 12950, 12953, 12954, 12957, 12958, 12961, 12962, 12965, 12966, 12969, 12970, 12973, 12974, 12977, 12978, 12981, 12982, 12985, 12986, 12989, 12990, 12993, 12994, 12997, 12998, 13001, 13002, 13005, 13006, 13009, 13010, 13013, 13014, 13017, 13018, 13021, 13022, 13025, 13026, 13029, 13030, 13033, 13034, 13037, 13038, 13041, 13042, 13045, 13046, 13049, 13050, 13053, 13054, 13057, 13058, 13061, 13062, 13065, 13066, 13069, 13070, 13073, 13074, 13077, 13078, 13081, 13082, 13085, 13086, 13089, 13090, 13093, 13094, 13097, 13098, 13101, 13102, 13105, 13106, 13109, 13110, 13113, 13114, 13117, 13118, 13121, 13122, 13125, 13126, 13129, 13130, 13133, 13134, 13137, 13138, 13141, 13142, 13145, 13146, 13149, 13150, 13153, 13154, 13157, 13158, 13161, 13162, 13165, 13166, 13169, 13170, 13173, 13174, 13177, 13178, 13181, 13182, 13185, 13186, 13189, 13190, 13193, 13194, 13197, 13198, 13201, 13202, 13205, 13206, 13209, 13210, 13213, 13214, 13217, 13218, 13221, 13222, 13225, 13226, 13229, 13230, 13233, 13234, 13237, 13238, 13241, 13242, 13245, 13246, 13249, 13250, 13253, 13254, 13257, 13258, 13261, 13262, 13265, 13266, 13269, 13270, 13273, 13274, 13277, 13278, 13281, 13282, 13285, 13286, 13289, 13290, 13293, 13294, 13297, 13298, 13301, 13302, 13305, 13306, 13309, 13310, 13313, 13314, 13317, 13318, 13321, 13322, 13325, 13326, 13329, 13330, 13333, 13334, 13337, 13338, 13341, 13342, 13345, 13346, 13349, 13350, 13353, 13354, 13357, 13358, 13361, 13362, 13365, 13366, 13369, 13370, 13373, 13374, 13377, 13378, 13381, 13382, 13385, 13386, 13389, 13390, 13393, 13394, 13397, 13398, 13401, 13402, 13405, 13406, 13409, 13410, 13413, 13414, 13417, 13418, 13421, 13422, 13425, 13426, 13429, 13430, 13433, 13434, 13437, 13438, 13441, 13442, 13445, 13446, 13449, 13450, 13453, 13454, 13457, 13458, 13461, 13462, 13465, 13466, 13469, 13470, 13473, 13474, 13477, 13478, 13481, 13482, 13485, 13486, 13489, 13490, 13493, 13494, 13497, 13498, 13501, 13502, 13505, 13506, 13509, 13510, 13513, 13514, 13517, 13518, 13521, 13522, 13525, 13526, 13529, 13530, 13533, 13534, 13537, 13538, 13541, 13542, 13545, 13546, 13549, 13550, 13553, 13554, 13557, 13558, 13561, 13562, 13565, 13566, 13569, 13570, 13573, 13574, 13577, 13578, 13581, 13582, 13585, 13586, 13589, 13590, 13593, 13594, 13597, 13598, 13601, 13602, 13605, 13606, 13609, 13610, 13613, 13614, 13617, 13618, 13621, 13622, 13625, 13626, 13629, 13630, 13633, 13634, 13637, 13638, 13641, 13642, 13645, 13646, 13649, 13650, 13653, 13654, 13657, 13658, 13661, 13662, 13665, 13666, 13669, 13670, 13673, 13674, 13677, 13678, 13681, 13682, 13685, 13686, 13689, 13690, 13693, 13694, 13697, 13698, 13701, 13702, 13705, 13706, 13709, 13710, 13713, 13714, 13717, 13718, 13721, 13722, 13725, 13726, 13729, 13730, 13733, 13734, 13737, 13738, 13741, 13742, 13745, 13746, 13749, 13750, 13753, 13754, 13757, 13758, 13761, 13762, 13765, 13766, 13769, 13770, 13773, 13774, 13777, 13778, 13781, 13782, 13785, 13786, 13789, 13790, 13793, 13794, 13797, 13798, 13801, 13802, 13805, 13806, 13809, 13810, 13813, 13814, 13817, 13818, 13821, 13822, 13825, 13826, 13829, 13830, 13833, 13834, 13837, 13838, 13841, 13842, 13845, 13846, 13849, 13850, 13853, 13854, 13857, 13858, 13861, 13862, 13865, 13866, 13869, 13870, 13873, 13874, 13877, 13878, 13881, 13882, 13885, 13886, 13889, 13890, 13893, 13894, 13897, 13898, 13901, 13902, 13905, 13906, 13909, 13910, 13913, 13914, 13917, 13918, 13921, 13922, 13925, 13926, 13929, 13930, 13933, 13934, 13937, 13938, 13941, 13942, 13945, 13946, 13949, 13950, 13953, 13954, 13957, 13958, 13961, 13962, 13965, 13966, 13969, 13970, 13973, 13974, 13977, 13978, 13981, 13982, 13985, 13986, 13989, 13990, 13993, 13994, 13997, 13998, 14001, 14002, 14005, 14006, 14009, 14010, 14013, 14014, 14017, 14018, 14021, 14022, 14025, 14026, 14029, 14030, 14033, 14034, 14037, 14038, 14041, 14042, 14045, 14046, 14049, 14050, 14053, 14054, 14057, 14058, 14061, 14062, 14065, 14066, 14069, 14070, 14073, 14074, 14077, 14078, 14081, 14082, 14085, 14086, 14089, 14090, 14093, 14094, 14097, 14098, 14101, 14102, 14105, 14106, 14109, 14110, 14113, 14114, 14117, 14118, 14121, 14122, 14125, 14126, 14129, 14130, 14133, 14134, 14137, 14138, 14141, 14142, 14145, 14146, 14149, 14150, 14153, 14154, 14157, 14158, 14161, 14162, 14165, 14166, 14169, 14170, 14173, 14174, 14177, 14178, 14181, 14182, 14185, 14186, 14189, 14190, 14193, 14194, 14197, 14198, 14201, 14202, 14205, 14206, 14209, 14210, 14213, 14214, 14217, 14218, 14221, 14222, 14225, 14226, 14229, 14230, 14233, 14234, 14237, 14238, 14241, 14242, 14245, 14246, 14249, 14250, 14253, 14254, 14257, 14258, 14261, 14262, 14265, 14266, 14269, 14270, 14273, 14274, 14277, 14278, 14281, 14282, 14285, 14286, 14289, 14290, 14293, 14294, 14296, 14297, 14298, 14299, 14300, 14301, 14302, 14303, 14304, 14305, 14306, 14307, 14308, 14309, 14310, 14311, 14312, 14313, 14314, 14315, 14316, 14317, 14318, 14319, 14320, 14321, 14322, 14323, 14324, 14325, 14326, 14327, 14328, 14329, 14330, 14331, 14332, 14333, 14334, 14335, 14336, 14337, 14338, 14339, 14340, 14341, 14342, 14343, 14344, 14345, 14346, 14347, 14348, 14349, 14350, 14351, 14352, 14353, 14354, 14355, 14356, 14357, 14358, 14359, 14360, 14361, 14362, 14363, 14364, 14365, 14366, 14367, 14368, 14369, 14370, 14371, 14372, 14373, 14374, 14375, 14376, 14377, 14378, 14379, 14380, 14381, 14382, 14383, 14384, 14385, 14386, 14387, 14388, 14389, 14390, 14391, 14392, 14393, 14394, 14395, 14396, 14397, 14398, 14399, 14400, 14401, 14402, 14403, 14404, 14405, 14406, 14407, 14408, 14409, 14410, 14411, 14412, 14413, 14414, 14415, 14416, 14417, 14418, 14419, 14420, 14421, 14422, 14423};
//    
//    mesh->hRefine(cellsToRefine, false);
//    mesh->enforceOneIrregularity(false);
//    TEST_EQUALITY(mesh->irregularity(), expectedIrregularity);
//  }

  TEUCHOS_UNIT_TEST( Mesh, CurvilinearCellDataMigration )
  {
    /*
     This test is derived from an issue Brendan Keith flagged; the failure occurs during the second refinement,
     when run on 3 or more processors.  Looks like an issue with cell migration for curvilinear meshes; an
     exception was being thrown saying that there is an attempt to add 3rd cell to side.
     */
    MPIWrapper::CommWorld()->Barrier();
    
    int spaceDim = 2;
    double cylinderRadius = 1.0;
    auto spatialMeshGeom = MeshFactory::confinedCylinderGeometry(cylinderRadius);
    map< pair<IndexType, IndexType>, ParametricCurvePtr > localEdgeToCurveMap = spatialMeshGeom->edgeToCurveMap();
    auto globalEdgeToCurveMap = map< pair<GlobalIndexType, GlobalIndexType>, ParametricCurvePtr >(localEdgeToCurveMap.begin(),localEdgeToCurveMap.end());
    auto spatialMeshTopo = Teuchos::rcp( new MeshTopology(spatialMeshGeom) );
    spatialMeshTopo->setEdgeToCurveMap(globalEdgeToCurveMap, Teuchos::null);
    
    ///////////
    bool useConformingTraces = true;
    PoissonFormulation form(spaceDim, useConformingTraces);
    int H1Order = 2, delta_k = 2;
    MeshPtr mesh = MeshFactory::minRuleMesh(spatialMeshTopo, form.bf(), H1Order, delta_k);
    if (globalEdgeToCurveMap.size() > 0)
    {
      spatialMeshTopo->initializeTransformationFunction(mesh);
    }
    GlobalIndexType initialCellCount = mesh->getTopology()->cellCount();
    vector<GlobalIndexType> refinement0 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71};
    mesh->hRefine(refinement0, RefinementPattern::regularRefinementPatternQuad());
    mesh->enforceOneIrregularity();
    
    // check that all locally-known cells have the correct parent status and level
    const set<GlobalIndexType>* localActiveCellIndices = &mesh->getTopology()->getLocallyKnownActiveCellIndices();
    for (GlobalIndexType localCellID : *localActiveCellIndices)
    {
      CellPtr cell = mesh->getTopology()->getCell(localCellID);
      
      // if the cell is active, then it must not have been refined, and must not be a parent
      TEST_ASSERT(std::find(refinement0.begin(), refinement0.end(), localCellID) == refinement0.end());
      TEST_ASSERT(! cell->isParent(mesh->getTopology()));

      int level = cell->level();
      if (localCellID < initialCellCount)
      {
        TEST_EQUALITY(level, 0);
      }
      else
      {
        // if the cell ID is greater than or equal to initialCellCount, then the cell must be level 1
        TEST_EQUALITY(level, 1);
      }
    }
    int cellCountAfterRef0 = mesh->getTopology()->cellCount();
    
    vector<GlobalIndexType> refinement1 = {75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 121, 156};
    mesh->hRefine(refinement1, RefinementPattern::regularRefinementPatternQuad());
    mesh->enforceOneIrregularity();
    
    localActiveCellIndices = &mesh->getTopology()->getLocallyKnownActiveCellIndices();
    for (GlobalIndexType localCellID : *localActiveCellIndices)
    {
      CellPtr cell = mesh->getTopology()->getCell(localCellID);
      
      // if the cell is active, then it must not have been refined, and must not be a parent
      TEST_ASSERT(std::find(refinement0.begin(), refinement0.end(), localCellID) == refinement0.end());
      TEST_ASSERT(! cell->isParent(mesh->getTopology()));
      
      int level = cell->level();
      if (localCellID < initialCellCount)
      {
        TEST_EQUALITY(level, 0);
      }
      else if (localCellID < cellCountAfterRef0)
      {
        // if the cell ID is greater than or equal to initialCellCount, then the cell must be level 1
        TEST_EQUALITY(level, 1);
      }
      else
      {
        TEST_EQUALITY(level, 2);
      }
    }
    
    int irregularity = mesh->irregularity();
    // irregularity should be 1 (we have some hanging nodes, and have enforced 1-irregularity)
    TEST_EQUALITY(irregularity, 1);
  }
  
  TEUCHOS_UNIT_TEST( Mesh, EnforceRegularityHexahedralMesh )
  {
    MPIWrapper::CommWorld()->Barrier();
    int spaceDim = 3;
    int H1Order = 1;
    vector<int> elemCounts = {2,2,1}; // just big enough that we can have some refinements that an element only sees along an edge
    vector<double> dims(spaceDim,1.0);
    
    bool repartitionAndRebuild = false; // since we'll have 2-irregular meshes at some point, defer repartitioning until 1-irregularity is enforced
    bool conformingTraces = true;
    
    /*
     We first run on a serial communicator, and record the cells we refined there.
     Then we re-run on CommWorld.
     */
    vector<vector<GlobalIndexType>> cellsForRefinement;
    
    PoissonFormulation form(spaceDim,conformingTraces);
    MeshPtr mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order, 0, vector<double>(), map<int,int>(),
                                                map<int,int>(), MPIWrapper::CommSerial());
    MeshTopology* meshTopo = dynamic_cast<MeshTopology*>(mesh->getTopology().get());
    
    int numActiveElementsExpected = elemCounts[0] * elemCounts[1] * elemCounts[2];
    int numActiveElementsActual = meshTopo->activeCellCount();
    TEST_EQUALITY(numActiveElementsActual, numActiveElementsExpected);
    
    // there should be one edge that is shared by all four cells; let's find it
    int centralEdgeEntityIndex = -1;
    int edgeDim = 1;
    GlobalIndexType cellID0 = 0;
    CellPtr cell0 = meshTopo->getCell(cellID0);
    CellTopoPtr cellTopo = cell0->topology();
    int edgeCount = cellTopo->getSubcellCount(edgeDim);
    for (int edgeOrdinal=0; edgeOrdinal<edgeCount; edgeOrdinal++)
    {
      IndexType edgeEntityIndex = cell0->entityIndex(edgeDim, edgeOrdinal);
      int numCellsForEdge = meshTopo->getCellsContainingEntity(edgeDim, edgeEntityIndex).size();
      if (numCellsForEdge == 4)
      {
        centralEdgeEntityIndex = edgeEntityIndex;
        break;
      }
    }
    
    // test that we found it:
    TEST_INEQUALITY(centralEdgeEntityIndex, -1);
    
    // now, refine cell 0
    mesh->hRefine(vector<GlobalIndexType>{cellID0}, repartitionAndRebuild);
    cellsForRefinement.push_back(vector<GlobalIndexType>{cellID0});
    
    // that should add 7 new active elements
    numActiveElementsExpected += 7;
    numActiveElementsActual = meshTopo->activeCellCount();
    TEST_EQUALITY(numActiveElementsActual, numActiveElementsExpected);
    
    // now, our central edge should have a couple children
    vector<IndexType> centralEdgeChildEntities = meshTopo->getChildEntities(edgeDim, centralEdgeEntityIndex);
    TEST_EQUALITY(centralEdgeChildEntities.size(), 2);
    
    // determine the cellID of the cell that contains the first child edge
    set< pair<IndexType, unsigned> > cellsForChildEdge = meshTopo->getCellsContainingEntity(edgeDim, centralEdgeChildEntities[0]);
    // test that there is just one such cell
    TEST_EQUALITY(cellsForChildEdge.size(), 1);
    IndexType cellIDForCentralChildEdge = (*cellsForChildEdge.begin()).first;
    mesh->hRefine(vector<GlobalIndexType>{cellIDForCentralChildEdge}, repartitionAndRebuild);
    cellsForRefinement.push_back(vector<GlobalIndexType>{cellIDForCentralChildEdge});
    
    // should have another 7 new active elements:
    numActiveElementsExpected += 7;
    numActiveElementsActual = meshTopo->activeCellCount();
    TEST_EQUALITY(numActiveElementsActual, numActiveElementsExpected);
    
    // right now, we've only refined one original cell and one of its children; therefore, the original central edge
    // should have three active cells
    int numActiveCellsForCentralEdgeExpected = 3;
    int numActiveCellsForCentralEdge = meshTopo->getActiveCellIndices(edgeDim, centralEdgeEntityIndex).size();
    TEST_EQUALITY(numActiveCellsForCentralEdge, numActiveCellsForCentralEdgeExpected);
    
    // now, enforce 1 irregularity.  This should cause all 3 remaining original cells to be refined.
    mesh->enforceOneIrregularity();
    numActiveCellsForCentralEdgeExpected = 0;
    numActiveCellsForCentralEdge = meshTopo->getActiveCellIndices(edgeDim, centralEdgeEntityIndex).size();
    TEST_EQUALITY(numActiveCellsForCentralEdge, numActiveCellsForCentralEdgeExpected);
    
    // now, repeat all the above, skipping the cell ID determinations
    mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order, 0, vector<double>(), map<int,int>(),
                                                map<int,int>(), MPIWrapper::CommWorld());
    meshTopo = dynamic_cast<MeshTopology*>(mesh->getTopology().get());
    
    numActiveElementsExpected = elemCounts[0] * elemCounts[1] * elemCounts[2];
    numActiveElementsActual = meshTopo->activeCellCount();
    TEST_EQUALITY(numActiveElementsActual, numActiveElementsExpected);
    
    // first refinement (results in a 1-irregular mesh)
    mesh->hRefine(cellsForRefinement[0], repartitionAndRebuild);
    
    // that should add 7 new active elements
    numActiveElementsExpected += 7;
    numActiveElementsActual = meshTopo->activeCellCount();
    TEST_EQUALITY(numActiveElementsActual, numActiveElementsExpected);
    
    // second refinement (results in a 2-irregular mesh)
    mesh->hRefine(cellsForRefinement[1], repartitionAndRebuild);
    // should have another 7 new active elements:
    numActiveElementsExpected += 7;
    numActiveElementsActual = meshTopo->activeCellCount();
    TEST_EQUALITY(numActiveElementsActual, numActiveElementsExpected);
    
    // now, enforce 1 irregularity.  This should cause all 3 remaining original cells to be refined.
    mesh->enforceOneIrregularity();
    numActiveCellsForCentralEdgeExpected = 0;
    numActiveCellsForCentralEdge = meshTopo->getActiveCellIndices(edgeDim, centralEdgeEntityIndex).size();
    TEST_EQUALITY(numActiveCellsForCentralEdge, numActiveCellsForCentralEdgeExpected);
  }
  
  TEUCHOS_UNIT_TEST( Mesh, EnforceRegularityHexadralMeshComplex )
  {
    /*
     This is basically a recreation of an issue Truman Ellis ran into, demonstrating a bug in MeshTopology's
     determination of like-dimensional constraints.  There is probably a simpler way to check the same behavior,
     but this is not, it turns out, too expensive, so I'm leaving it as is.
     */
    vector<int> elementCounts = {1,1,2};
    int spaceDim = elementCounts.size();
    int testSpaceEnrichment = spaceDim;
    int H1Order = 1;
    
    vector<double> dimensions(spaceDim,1.0);
    
    bool useConformingTraces = true;
    PoissonFormulation poissonForm(spaceDim, useConformingTraces);
    MeshPtr mesh = MeshFactory::rectilinearMesh(poissonForm.bf(), dimensions, elementCounts, H1Order, testSpaceEnrichment);
    
    mesh->hRefine(vector<GlobalIndexType>{0,1}, false);
    mesh->hRefine(vector<GlobalIndexType>{8,12,14,15,16,17}, false);
    mesh->hRefine(vector<GlobalIndexType>{51}, false);
    
    mesh->enforceOneIrregularity(true);
    int irregularity = mesh->irregularity();
    TEST_EQUALITY(irregularity, 1);
    
    VarPtr traceVar = poissonForm.u_hat(); // important that it be H^1-conforming
    
    MeshTopology* meshTopo = dynamic_cast<MeshTopology*>(mesh->getTopology().get());
    int edgeDim = 1;
    
    auto myCellIndices = &mesh->cellIDsInPartition();
    for (auto cellID : *myCellIndices)
    {
      CellPtr cell = meshTopo->getCell(cellID);
      int edgeCount = cell->topology()->getEdgeCount();
      for (int edgeOrdinal=0; edgeOrdinal<edgeCount; edgeOrdinal++)
      {
        IndexType edgeIndex = cell->entityIndex(edgeDim, edgeOrdinal);
        if (meshTopo->entityHasParent(edgeDim, edgeIndex))
        {
          IndexType parentEdgeIndex = meshTopo->getEntityParent(edgeDim, edgeIndex);
          if (meshTopo->entityHasParent(edgeDim, parentEdgeIndex))
          {
            IndexType grandparentEdgeIndex = meshTopo->getEntityParent(edgeDim, parentEdgeIndex);
            set<pair<IndexType,unsigned>> cellEntries = meshTopo->getCellsContainingEntity(edgeDim, grandparentEdgeIndex);
            auto activeCells = &meshTopo->getMyActiveCellIndices();
            for (auto cellEntry : cellEntries)
            {
              IndexType cellID = cellEntry.first;
              if (activeCells->find(cellID) != activeCells->end())
              {
                success = false;
                out << "Active cell " << cellID << " contains 'grandparent' edge, a violation of 1-irregularity.\n";
              }
            }
          }
        }
      }
    }
  }
  
  TEUCHOS_UNIT_TEST( Mesh, EnforceRegularityInteriorTriangles )
  {
    int spaceDim = 2;
    int H1Order = 2;
    bool useConformingTraces = true;
    
    int delta_k = spaceDim;
    
    vector<vector<double>> vertices = {{0,0},{1,0},{0.5,1}};
    vector<vector<IndexType>> elementVertices = {{0,1,2}};
    CellTopoPtr triangle = CellTopology::triangle();
    
    MeshGeometryPtr geometry = Teuchos::rcp( new MeshGeometry(vertices, elementVertices, {triangle}) );
    MeshTopologyPtr meshTopo = Teuchos::rcp( new MeshTopology(geometry));
    
    // create a problematic mesh of a particular sort: refine once, then refine the interior element.  Then refine the interior element of the refined element.
    IndexType cellIDToRefine = 0, nextCellIndex = 1;
    int interiorChildOrdinal = 1; // interior child has index 1 in children
    RefinementPatternPtr refPattern = RefinementPattern::regularRefinementPattern(triangle);
    meshTopo->refineCell(cellIDToRefine, refPattern, nextCellIndex);
    nextCellIndex += refPattern->numChildren();
    
    vector<CellPtr> children = meshTopo->getCell(cellIDToRefine)->children();
    cellIDToRefine = children[interiorChildOrdinal]->cellIndex();
    meshTopo->refineCell(cellIDToRefine, refPattern, nextCellIndex);
    nextCellIndex += refPattern->numChildren();
    
    children = meshTopo->getCell(cellIDToRefine)->children();
    cellIDToRefine = children[interiorChildOrdinal]->cellIndex();
    meshTopo->refineCell(cellIDToRefine, refPattern, nextCellIndex);
    nextCellIndex += refPattern->numChildren();
    
    PoissonFormulation poissonForm(spaceDim, useConformingTraces);
    MeshPtr mesh = Teuchos::rcp( new Mesh(meshTopo, poissonForm.bf(), H1Order, delta_k) );
    
    // thus far, we have done 3 refinements, each of which added 3 elements.  Expect to have 10 elements
    int numActiveElementsExpected = 10;
    int numActiveElements = mesh->numActiveElements();
    TEST_EQUALITY(numActiveElements, numActiveElementsExpected);
    
    // The above mesh will cause some cascading constraints, which the new getBasisMap() can't
    // handle.  We have added logic to deal with this case to Mesh::enforceOneIrregularity().
    mesh->enforceOneIrregularity();
    
    // The strategy above should induce refinements on the topmost level.
    // 3 refinements, each of which adds 3 elements to the active count: expect 19 elements
    numActiveElementsExpected = 19;
    
    numActiveElements = mesh->numActiveElements();
    TEST_EQUALITY(numActiveElements, numActiveElementsExpected);
  }
  
  TEUCHOS_UNIT_TEST( Mesh, AnisotropicQuadNeighbors )
  {
    /*
     Basic Steps:
     1. Construct two-element quad mesh
     2. Refine element 0 in x.
     3. Now we have elements 2,3,1.
     4. Check that 2 neighbors 3 and 3 neighbors 1.
     */
    
    int H1Order = 2;
    vector<int> elemCounts = {2,1};
    vector<double> dims(2,1.0);
    
    int spaceDim = 2;
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    // lambda for checking that the given active (leaf) cellID is owned on this rank
    auto ownedAndActive = [&] (MeshTopologyViewPtr meshTopo, IndexType cellID) -> bool
    {
      auto & ownedAndActive = meshTopo->getMyActiveCellIndices();
      return ownedAndActive.find(cellID) != ownedAndActive.end();
    };
    
    // lambda for checking neighbors
    auto testNeighbors = [&] (MeshPtr mesh, CellPtr cell, set<IndexType> expectedNeighbors) -> void
    {
      auto meshTopo = mesh->getTopology();
      // skip testing if this cell is not an owned active cell
      if (! ownedAndActive(meshTopo, cell->cellIndex()))
      {
        return;
      }
      vector<CellPtr> cellNeighbors = cell->getNeighbors(meshTopo);
      
      set<IndexType> cellNeighborIDs;
      for (auto neighbor : cellNeighbors)
      {
        cellNeighborIDs.insert(neighbor->cellIndex());
      }
      
      if (cellNeighborIDs != expectedNeighbors)
      {
        out << "NeighborIDs for cell " << cell->cellIndex() << " do not match expected.\n";
        print(out, "neighborIDs", cellNeighborIDs);
        print(out, "expectedNeighborIDs", expectedNeighbors);
        success = false;
      }
    };
    
    // first test: single refinement described above
    {
      auto mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
      
      bool repartitionAndRebuild = true;
      vector<GlobalIndexType> cellsToHxRefine = {0};
      mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
      
      TEST_EQUALITY(mesh->numActiveElements(), 3);
    
      auto meshTopo = mesh->getTopology();
      if (meshTopo->isValidCellIndex(0))
      {
        CellPtr cell0 = meshTopo->getCell(0);
        TEST_ASSERT(cell0->isParent(meshTopo));
      
        auto children = cell0->children();
        for (auto child : children)
        {
          if (child->cellIndex() == 2)
          {
            testNeighbors(mesh,child,{3});
          }
          else if (child->cellIndex() == 3)
          {
            testNeighbors(mesh,child,{1,2});
          }
        }
      }
    
      if (meshTopo->isValidCellIndex(1))
      {
        CellPtr cell1 = meshTopo->getCell(1);
        testNeighbors(mesh,cell1,{3});
      }
    }
    // next test: refine in both x and y
    {
      // we test both possible orders of refinement
      vector<bool> xFirstChoices = {true,false};
      
      for (bool xFirst : xFirstChoices)
      {
        auto mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
        bool repartitionAndRebuild = true;
        vector<GlobalIndexType> cellsToHxRefine = {0};
        vector<GlobalIndexType> cellsToHyRefine = {1};
        
        vector<GlobalIndexType> cell0ChildIDs, cell1ChildIDs;
        if (xFirst)
        {
          mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell0ChildIDs = {2,3};
          mesh->hRefine(cellsToHyRefine, RefinementPattern::yAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell1ChildIDs = {4,5};
        }
        else
        {
          mesh->hRefine(cellsToHyRefine, RefinementPattern::yAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell1ChildIDs = {2,3};
          mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell0ChildIDs = {4,5};
        }
        
        TEST_EQUALITY(mesh->numActiveElements(), 4);
        
        auto meshTopo = mesh->getTopology();
        if (meshTopo->isValidCellIndex(0))
        {
          CellPtr cell0 = meshTopo->getCell(0);
          TEST_ASSERT(cell0->isParent(meshTopo));
          
          auto children = cell0->children();
          for (auto child : children)
          {
            if (child->cellIndex() == cell0ChildIDs[0])
            {
              testNeighbors(mesh,child,{cell0ChildIDs[1]});
            }
            else if (child->cellIndex() == cell0ChildIDs[1])
            {
              testNeighbors(mesh,child,{1,cell0ChildIDs[0]});
            }
          }
        }
        
        if (meshTopo->isValidCellIndex(1))
        {
          CellPtr cell1 = meshTopo->getCell(1);
          TEST_ASSERT(cell1->isParent(meshTopo));
          
          auto children = cell1->children();
          for (auto child : children)
          {
            if (child->cellIndex() == cell1ChildIDs[0])
            {
              testNeighbors(mesh,child,{cell0ChildIDs[1],cell1ChildIDs[1]});
            }
            else if (child->cellIndex() == cell1ChildIDs[1])
            {
              testNeighbors(mesh,child,{cell0ChildIDs[1],cell1ChildIDs[0]});
            }
          }
        }
      }
    }
    
    // now, refine in x and y as above, but refine one of the x children in y such that we get compatibility with the y refinement
    // (should find the y-children as neighbors)
    {
      // we test both possible orders of refinement
      vector<bool> xFirstChoices = {true,false};
      
      for (bool xFirst : xFirstChoices)
      {
        auto mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
        bool repartitionAndRebuild = true;
        vector<GlobalIndexType> cellsToHxRefine = {0};
        vector<GlobalIndexType> cellsToHyRefine = {1};
        
        vector<GlobalIndexType> cell0ChildIDs, cell1ChildIDs;
        if (xFirst)
        {
          mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell0ChildIDs = {2,3};
          mesh->hRefine(cellsToHyRefine, RefinementPattern::yAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell1ChildIDs = {4,5};
        }
        else
        {
          mesh->hRefine(cellsToHyRefine, RefinementPattern::yAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell1ChildIDs = {2,3};
          mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell0ChildIDs = {4,5};
        }
        cellsToHyRefine = {cell0ChildIDs[1]}; // refine the child 0 cell that abuts cell 1
        mesh->hRefine(cellsToHyRefine, RefinementPattern::yAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
        vector<GlobalIndexType> newlyCompatibleCells = {6,7};
        
        TEST_EQUALITY(mesh->numActiveElements(), 5);
        
        auto meshTopo = mesh->getTopology();
        if (meshTopo->isValidCellIndex(6))
        {
          CellPtr cell6 = meshTopo->getCell(6);
          // expected neighbors: the first of cell 0's children, and the first of cell 1's children, and the new cell 7
          testNeighbors(mesh,cell6,{cell0ChildIDs[0],cell1ChildIDs[0],7});
        }
        if (meshTopo->isValidCellIndex(7))
        {
          CellPtr cell7 = meshTopo->getCell(7);
          // expected neighbors: the first of cell 0's children, and the second of cell 1's children, and the new cell 6
          testNeighbors(mesh,cell7,{cell0ChildIDs[0],cell1ChildIDs[1],6});
        }
      }
    }
    
    // now, refine in x and y as above, but refine the rightmost of the x children in x
    {
      // we test both possible orders of refinement
      vector<bool> xFirstChoices = {true,false};
      
      for (bool xFirst : xFirstChoices)
      {
        auto mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
        bool repartitionAndRebuild = true;
        vector<GlobalIndexType> cellsToHxRefine = {0};
        vector<GlobalIndexType> cellsToHyRefine = {1};
        
        vector<GlobalIndexType> cell0ChildIDs, cell1ChildIDs;
        if (xFirst)
        {
          mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell0ChildIDs = {2,3};
          mesh->hRefine(cellsToHyRefine, RefinementPattern::yAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell1ChildIDs = {4,5};
        }
        else
        {
          mesh->hRefine(cellsToHyRefine, RefinementPattern::yAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell1ChildIDs = {2,3};
          mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
          cell0ChildIDs = {4,5};
        }
        cellsToHxRefine = {cell0ChildIDs[1]}; // refine the child 0 cell that abuts cell 1
        mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
        TEST_EQUALITY(mesh->numActiveElements(), 5);
        
        auto meshTopo = mesh->getTopology();
        if (meshTopo->isValidCellIndex(6))
        {
          CellPtr cell6 = meshTopo->getCell(6);
          // expected neighbors: the first of cell 0's children and the new cell 7
          testNeighbors(mesh,cell6,{cell0ChildIDs[0],7});
        }
        if (meshTopo->isValidCellIndex(7))
        {
          CellPtr cell7 = meshTopo->getCell(7);
          // expected neighbors: cell 1 (the parent), and the new cell 6
          testNeighbors(mesh,cell7,{1,6});
        }
      }
    }
    
  }
  
TEUCHOS_UNIT_TEST( Mesh, ParitySpaceTime1D )
{
  int spaceDim = 1;
  bool spaceTime = true;
  MeshPtr spaceTimeMesh = makeTestMesh(spaceDim, spaceTime);

  set<GlobalIndexType> cellIDs = spaceTimeMesh->cellIDsInPartition();
  for (set<GlobalIndexType>::iterator cellIDIt = cellIDs.begin(); cellIDIt != cellIDs.end(); cellIDIt++)
  {
    GlobalIndexType cellID = *cellIDIt;
    FieldContainer<double> parities = spaceTimeMesh->globalDofAssignment()->cellSideParitiesForCell(cellID);
    CellPtr cell = spaceTimeMesh->getTopology()->getCell(cellID);
    for (int sideOrdinal=0; sideOrdinal<cell->getSideCount(); sideOrdinal++)
    {
      double parity = parities[sideOrdinal];
      if (cell->getNeighbor(sideOrdinal,spaceTimeMesh->getTopology()) == Teuchos::null)
      {
        // where there is no neighbor, the parity should be 1.0
        TEST_EQUALITY(parity, 1.0);
      }
      else
      {
        pair<GlobalIndexType, unsigned> neighborInfo = cell->getNeighborInfo(sideOrdinal,spaceTimeMesh->getTopology());
        GlobalIndexType neighborCellID = neighborInfo.first;
        unsigned neighborSide = neighborInfo.second;
        FieldContainer<double> neighborParities = spaceTimeMesh->globalDofAssignment()->cellSideParitiesForCell(neighborCellID);
        double neighborParity = neighborParities[neighborSide];
        TEST_EQUALITY(parity, -neighborParity);
      }
    }
  }
}
  
  TEUCHOS_UNIT_TEST( Mesh, HPRefine2D )
  {
    // simple test against a problem case for hp-refinements, in an initially 2-element mesh:
    //  - p-refine left element; this is now constrained by right element along shared edge
    //  - h-refine right element; this would be constrained by left element along shared edge, if they had equal orders
    // it should be the case that 1-irregularity enforcement (or something) takes care of this by p-refining the h-refined
    // elements along the shared interface.
    //
    // this test just confirms that we can perform the appropriate projections from a prior
    // solution onto the refined mesh (we don't check that they're correct or anything, just that
    // we complete without throwing an exception)
    MeshTopologyPtr spatialMeshTopo = MeshFactory::quadMeshTopology(1.0,1.0,2,2);
    
    int spaceDim = 2;
    int H1Order = 3;
    vector<int> elemCounts = {2,1};
    vector<double> dims(spaceDim,1.0);
    
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    auto mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
    
    int solutionOrdinal = 0;
    map<int,FunctionPtr> functionMap;
    
    functionMap[form.u()->ID()] = Function::constant(1.0);
    functionMap[form.u_hat()->ID()] = Function::constant(1.0);
    SolutionPtr solution = Solution::solution(form.bf(), mesh);
    mesh->registerSolution(solution);
    solution()->projectOntoMesh(functionMap, solutionOrdinal);
    
    // before we p-refine, print constraint report:
    //  GDAMinimumRule* minRule = dynamic_cast<GDAMinimumRule *>(mesh->globalDofAssignment().get());
    
    std::set<GlobalIndexType> cellsToPRefine = {0};
    std::set<GlobalIndexType> cellsToHRefine = {1};
    bool repartitionAndRebuild = false;
    int pToAdd = 1;
    mesh->pRefine(cellsToPRefine, pToAdd, repartitionAndRebuild);
    mesh->hRefine(cellsToHRefine, RefinementPattern::regularRefinementPatternQuad(), repartitionAndRebuild);
    
    mesh->repartitionAndRebuild();
    
    // p-refine once more
    mesh->pRefine(cellsToPRefine, pToAdd, repartitionAndRebuild);
    mesh->repartitionAndRebuild();
  }

  TEUCHOS_UNIT_TEST( Mesh, HAnisotropicRefineCurvilinear2D )
  {
    MPIWrapper::CommWorld()->Barrier();
    // This is mostly a test that things don't go awry with curvilinear meshes under p-refinement on multiple MPI ranks.
    // We just confirm that with some solution data in place, we can p-refine without exceptions being thrown...
    int spaceDim = 2;
    int delta_k = 2;
    int H1Order = 2;
    
    double cylinderRadius = 1.0;
    MeshGeometryPtr meshGeometry = MeshFactory::halfConfinedCylinderGeometry(cylinderRadius);
    map< pair<IndexType, IndexType>, ParametricCurvePtr > localEdgeToCurveMap = meshGeometry->edgeToCurveMap();
    auto globalEdgeToCurveMap = map< pair<GlobalIndexType, GlobalIndexType>, ParametricCurvePtr >(localEdgeToCurveMap.begin(),localEdgeToCurveMap.end());
    MeshTopologyPtr meshTopo = Teuchos::rcp( new MeshTopology(meshGeometry) );
    meshTopo->setEdgeToCurveMap(globalEdgeToCurveMap, Teuchos::null);
    
    //    cout << "globalEdgeToCurveMap.size(): " << globalEdgeToCurveMap.size() << endl;
    
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    MeshPtr mesh = Teuchos::rcp( new Mesh(meshTopo, form.bf(), H1Order, delta_k) ) ;
    meshTopo->initializeTransformationFunction(mesh);
    
    int solutionOrdinal = 0;
    map<int,FunctionPtr> functionMap;
    
    functionMap[form.u()->ID()] = Function::constant(1.0);
    SolutionPtr solution = Solution::solution(form.bf(), mesh);
    mesh->registerSolution(solution);
    solution()->projectOntoMesh(functionMap, solutionOrdinal);
    
    std::set<GlobalIndexType> cellsToHxRefine = {0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35};
    //  print("cellsToHRefine", cellsToHRefine);
    bool repartitionAndRebuild = false;
    mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
    
    mesh->enforceOneIrregularity(repartitionAndRebuild);
    mesh->repartitionAndRebuild();
    
    cellsToHxRefine = {8, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105};
//    MeshTopology* topology = dynamic_cast<MeshTopology*>(mesh->getTopology().get());
//    cout << "cellsToHxRefine, cells with curved edges: ";
//    for (auto parentCellID : cellsToHxRefine)
//    {
//      if (topology->isValidCellIndex(parentCellID))
//      {
//        if (topology->cellHasCurvedEdges(parentCellID))
//        {
//          cout << parentCellID << " ";
//        }
//      }
//    }
//    cout << endl;
    
    mesh->hRefine(cellsToHxRefine, RefinementPattern::xAnisotropicRefinementPatternQuad(), repartitionAndRebuild);
    mesh->enforceOneIrregularity(repartitionAndRebuild);
    mesh->repartitionAndRebuild();
  }
  
  TEUCHOS_UNIT_TEST( Mesh, HPRefineCurvilinear2D )
  {
    MPIWrapper::CommWorld()->Barrier();
    // This is mostly a test that things don't go awry with curvilinear meshes under hp-refinement on multiple MPI ranks.
    // We just confirm that with some solution data in place, we can p-refine without exceptions being thrown...
    int spaceDim = 2;
    int delta_k = 2;
    int H1Order = 2;
    
    double cylinderRadius = 1.0;
    MeshGeometryPtr meshGeometry = MeshFactory::halfConfinedCylinderGeometry(cylinderRadius);
    map< pair<IndexType, IndexType>, ParametricCurvePtr > localEdgeToCurveMap = meshGeometry->edgeToCurveMap();
    auto globalEdgeToCurveMap = map< pair<GlobalIndexType, GlobalIndexType>, ParametricCurvePtr >(localEdgeToCurveMap.begin(),localEdgeToCurveMap.end());
    MeshTopologyPtr meshTopo = Teuchos::rcp( new MeshTopology(meshGeometry) );
    meshTopo->setEdgeToCurveMap(globalEdgeToCurveMap, Teuchos::null);
    
    //    cout << "globalEdgeToCurveMap.size(): " << globalEdgeToCurveMap.size() << endl;
    
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    MeshPtr mesh = Teuchos::rcp( new Mesh(meshTopo, form.bf(), H1Order, delta_k) ) ;
    meshTopo->initializeTransformationFunction(mesh);
    
    int solutionOrdinal = 0;
    map<int,FunctionPtr> functionMap;
    
    functionMap[form.u()->ID()] = Function::constant(1.0);
    SolutionPtr solution = Solution::solution(form.bf(), mesh);
    mesh->registerSolution(solution);
    solution()->projectOntoMesh(functionMap, solutionOrdinal);
    
    int pToAdd = 1;
    std::set<GlobalIndexType> cellsToHRefine = {1, 2, 3, 7, 8, 9, 12, 13, 14, 15, 26, 27, 28, 29};
    std::set<GlobalIndexType> cellsToPRefine = {0, 4, 5, 6, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35};
    //  print("cellsToHRefine", cellsToHRefine);
    bool repartitionAndRebuild = false;
    mesh->hRefine(cellsToHRefine, repartitionAndRebuild);
    mesh->pRefine(cellsToPRefine, pToAdd, repartitionAndRebuild);
    
    mesh->enforceOneIrregularity(repartitionAndRebuild);
    mesh->repartitionAndRebuild();
    
    cellsToHRefine = {36, 39, 40, 43, 44, 49, 50, 53, 54, 57};
    cellsToPRefine = {0, 4, 5, 6, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 45, 46, 47, 48, 58, 63};
    
    mesh->hRefine(cellsToHRefine, repartitionAndRebuild);
    mesh->pRefine(cellsToPRefine, pToAdd, repartitionAndRebuild);
    
    mesh->enforceOneIrregularity(repartitionAndRebuild);
    mesh->repartitionAndRebuild();
  }

  
TEUCHOS_UNIT_TEST( Mesh, PRefine2D )
{
  // simple test against a recent failure in p-refinements
  // basically, just confirms that we can perform the appropriate projections from a prior
  // solution onto the refined mesh (we don't check that they're correct or anything, just that
  // we complete without throwing an exception)
  MeshTopologyPtr spatialMeshTopo = MeshFactory::quadMeshTopology(1.0,1.0,2,2);
  
  int spaceDim = 2;
  int H1Order = 2;
  vector<int> elemCounts = {2,1};
  vector<double> dims(spaceDim,1.0);
  
  bool conformingTraces = true;
  PoissonFormulation form(spaceDim,conformingTraces);
  
  auto mesh = MeshFactory::rectilinearMesh(form.bf(), dims, elemCounts, H1Order);
  
  int solutionOrdinal = 0;
  map<int,FunctionPtr> functionMap;
  
  functionMap[form.u()->ID()] = Function::constant(1.0);
  SolutionPtr solution = Solution::solution(form.bf(), mesh);
  mesh->registerSolution(solution);
  solution()->projectOntoMesh(functionMap, solutionOrdinal);
  
  // before we p-refine, print constraint report:
//  GDAMinimumRule* minRule = dynamic_cast<GDAMinimumRule *>(mesh->globalDofAssignment().get());

  std::set<GlobalIndexType> cellsToPRefine = mesh->getActiveCellIDsGlobal();
  cellsToPRefine.erase(1);
//  print("cellsToPRefine", cellsToPRefine);
  bool repartitionAndRebuild = true;
  int pToAdd = 1;
  mesh->pRefine(cellsToPRefine, pToAdd, repartitionAndRebuild);
}
  
  TEUCHOS_UNIT_TEST( Mesh, PRefineCurvilinear2D )
  {
    // This is mostly a test that things don't go awry with curvilinear meshes under p-refinement on multiple MPI ranks.
    // We just confirm that with some solution data in place, we can p-refine without exceptions being thrown...
    int spaceDim = 2;
    int delta_k = 2;
    int H1Order = 2;
    
    double cylinderRadius = 1.0;
    MeshGeometryPtr meshGeometry = MeshFactory::halfConfinedCylinderGeometry(cylinderRadius);
    map< pair<IndexType, IndexType>, ParametricCurvePtr > localEdgeToCurveMap = meshGeometry->edgeToCurveMap();
    auto globalEdgeToCurveMap = map< pair<GlobalIndexType, GlobalIndexType>, ParametricCurvePtr >(localEdgeToCurveMap.begin(),localEdgeToCurveMap.end());
    MeshTopologyPtr meshTopo = Teuchos::rcp( new MeshTopology(meshGeometry) );
    meshTopo->setEdgeToCurveMap(globalEdgeToCurveMap, Teuchos::null);
    
//    cout << "globalEdgeToCurveMap.size(): " << globalEdgeToCurveMap.size() << endl;
    
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    MeshPtr mesh = Teuchos::rcp( new Mesh(meshTopo, form.bf(), H1Order, delta_k) ) ;
    meshTopo->initializeTransformationFunction(mesh);
    
    int solutionOrdinal = 0;
    map<int,FunctionPtr> functionMap;
    
    functionMap[form.u()->ID()] = Function::constant(1.0);
    SolutionPtr solution = Solution::solution(form.bf(), mesh);
    mesh->registerSolution(solution);
    solution()->projectOntoMesh(functionMap, solutionOrdinal);
    
    std::set<GlobalIndexType> cellsToPRefine = mesh->getActiveCellIDsGlobal();
    cellsToPRefine.erase(1);
    //  print("cellsToPRefine", cellsToPRefine);
    bool repartitionAndRebuild = true;
    int pToAdd = 1;
    mesh->pRefine(cellsToPRefine, pToAdd, repartitionAndRebuild);
  }
  
TEUCHOS_UNIT_TEST( Mesh, NormalSpaceTime1D )
{
  int spaceDim = 1;
  bool spaceTime = true;
  MeshPtr spaceTimeMesh = makeTestMesh(spaceDim, spaceTime);

  double tol = 1e-15;
  set<GlobalIndexType> cellIDs = spaceTimeMesh->cellIDsInPartition();
  for (set<GlobalIndexType>::iterator cellIDIt = cellIDs.begin(); cellIDIt != cellIDs.end(); cellIDIt++)
  {
    GlobalIndexType cellID = *cellIDIt;

    BasisCachePtr basisCache = BasisCache::basisCacheForCell(spaceTimeMesh,cellID);

    CellPtr cell = spaceTimeMesh->getTopology()->getCell(cellID);
    for (int sideOrdinal=0; sideOrdinal<cell->getSideCount(); sideOrdinal++)
    {
      FieldContainer<double> sideNormalsSpaceTime = basisCache->getSideBasisCache(sideOrdinal)->getSideNormalsSpaceTime();
      int numPoints = sideNormalsSpaceTime.dimension(1);

      // check that the normals are unit length:
      for (int ptOrdinal=0; ptOrdinal<numPoints; ptOrdinal++)
      {
        double lengthSquared = 0;
        for (int d=0; d<spaceTimeMesh->getDimension(); d++)
        {
          lengthSquared += sideNormalsSpaceTime(0,ptOrdinal,d) * sideNormalsSpaceTime(0,ptOrdinal,d);
        }
        double length = sqrt(lengthSquared);
        TEST_FLOATING_EQUALITY(length,1.0,tol);
      }

      if (cell->getNeighbor(sideOrdinal,spaceTimeMesh->getTopology()) != Teuchos::null)
      {
        // then we also want to check that pointwise the normals are opposite each other
        pair<GlobalIndexType, unsigned> neighborInfo = cell->getNeighborInfo(sideOrdinal,spaceTimeMesh->getTopology());
        GlobalIndexType neighborCellID = neighborInfo.first;
        unsigned neighborSide = neighborInfo.second;
        BasisCachePtr neighborBasisCache = BasisCache::basisCacheForCell(spaceTimeMesh,neighborCellID);
        FieldContainer<double> neighborSideNormals = neighborBasisCache->getSideBasisCache(neighborSide)->getSideNormalsSpaceTime();

        // NOTE: here we implicitly assume that the normals at each point will be the same, because we don't
        //       do anything to make neighbors' physical points come in the same order.  For now, this is true
        //       of our test meshes.
        for (int ptOrdinal=0; ptOrdinal<numPoints; ptOrdinal++)
        {
          for (int d=0; d<spaceTimeMesh->getDimension(); d++)
          {
            double cell_d = sideNormalsSpaceTime(0,ptOrdinal,d);
            double neighbor_d = neighborSideNormals(0,ptOrdinal,d);
            TEST_FLOATING_EQUALITY(cell_d, -neighbor_d, tol);
          }
        }
      }
    }
  }
}

void testSaveAndLoad2D(BFPtr bf, Teuchos::FancyOStream &out, bool &success)
{
  int H1Order = 2;
  vector<int> elemCounts = {3,2};
  vector<double> dims = {1.0,2.0};

  MeshPtr mesh = MeshFactory::rectilinearMesh(bf, dims, elemCounts, H1Order);
  RefinementPatternPtr quadRefinement = RefinementPattern::regularRefinementPatternQuad();
  
  int numGlobalRefinements = 2;
  for (int refinementLevel=0; refinementLevel<numGlobalRefinements; refinementLevel++)
  {
    set<GlobalIndexType> activeCells = mesh->getActiveCellIDsGlobal();
    mesh->hRefine(activeCells, quadRefinement);
  }
  
  string meshFile = "/tmp/SavedMesh.HDF5";
  mesh->saveToHDF5(meshFile);

  MeshPtr loadedMesh = MeshFactory::loadFromHDF5(bf, meshFile);
  TEST_EQUALITY(loadedMesh->globalDofCount(), mesh->globalDofCount());

  // just to confirm that we can manipulate the loaded mesh:
  set<GlobalIndexType> cellsToRefine;
  cellsToRefine.insert(0);
  loadedMesh->pRefine(cellsToRefine);
  
  // we default to using CommWorld for loading and creation.  Try loading in serial:
  loadedMesh = MeshFactory::loadFromHDF5(bf, meshFile, MPIWrapper::CommSerial());
  TEST_EQUALITY(loadedMesh->globalDofCount(), mesh->globalDofCount());
  
  // delete the file we created
  remove(meshFile.c_str());
}
  
  TEUCHOS_UNIT_TEST( Mesh, ProjectFieldSolution )
  {
    double tol = 1e-15;
    int spaceDim = 2;
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    int H1Order = 2;
    vector<int> elemCounts = {3,2};
    
    MeshPtr mesh = MeshFactory::rectilinearMesh(form.bf(), {1.0,2.0}, elemCounts, H1Order);
    
    SolutionPtr solution = Solution::solution(form.bf(), mesh);
    
    map<int, FunctionPtr> solutionMap;
    FunctionPtr exactFxn = Function::constant(1.0);
    VarPtr u = form.u();
    solutionMap[u->ID()] = exactFxn;
    
    const int solutionOrdinal = 0;
    solution->projectOntoMesh(solutionMap, solutionOrdinal);
    
    FunctionPtr solnFxn = Function::solution(u, solution, false);
    double err = (solnFxn - exactFxn)->l2norm(mesh);
    TEUCHOS_TEST_COMPARE(err, <, tol, out, success);
  }
  
  TEUCHOS_UNIT_TEST( Mesh, ProjectSolutionOnRefinement )
  {
    MPIWrapper::CommWorld()->Barrier();
    int spaceDim = 2;
    bool conformingTraces = true;
    PoissonFormulation form(spaceDim,conformingTraces);
    
    int H1Order = 2;
    vector<int> elemCounts = {3,2};
    
    MeshPtr mesh = MeshFactory::rectilinearMesh(form.bf(), {1.0,2.0}, elemCounts, H1Order);

    SolutionPtr solution = Solution::solution(form.bf(), mesh);
    mesh->registerSolution(solution);
    
    map<int, FunctionPtr> solutionMap;
    FunctionPtr x = Function::xn();
    solutionMap[form.u()->ID()] = x;
    solutionMap[form.sigma()->ID()] = Function::constant({1.0,0.0});
    solutionMap[form.u_hat()->ID()] = x;
    FunctionPtr n = Function::normal();
    FunctionPtr n_parity = Function::normal() * Function::sideParity();
    solutionMap[form.sigma_n_hat()->ID()] = Function::constant({1.0,0.0}) * n_parity;
    
    const int solutionOrdinal = 0;
    solution->projectOntoMesh(solutionMap,solutionOrdinal);
    
    // sanity check: make sure that the difference *before* refinement is 0
    double tol = 1e-14;
    for (auto entry : solutionMap)
    {
      int varID = entry.first;
      FunctionPtr exactFxn = entry.second;
      VarPtr var = form.bf()->varFactory()->trial(varID);
      FunctionPtr solnFxn = Function::solution(var, solution, false);
      double err = (solnFxn - exactFxn)->l2norm(mesh);
      TEUCHOS_TEST_COMPARE(err, <, tol, out, success);
      out << "Before refinement, err for variable " << var->name() << ": " << err << endl;
    }
    
    // now, refine uniformly:
    RefinementStrategy::hRefineUniformly(mesh);
    
    for (auto entry : solutionMap)
    {
      int varID = entry.first;
      FunctionPtr exactFxn = entry.second;
      VarPtr var = form.bf()->varFactory()->trial(varID);
      FunctionPtr solnFxn = Function::solution(var, solution, false);
      double err = (solnFxn - exactFxn)->l2norm(mesh);
      TEUCHOS_TEST_COMPARE(err, <, tol, out, success);
      out << "After refinement, err for variable " << var->name() << ": " << err << endl;
    }
  }
  

TEUCHOS_UNIT_TEST( Mesh, SaveAndLoadPoissonConforming )
{
  MPIWrapper::CommWorld()->Barrier();
  int spaceDim = 2;
  bool conformingTraces = true;
  PoissonFormulation form(spaceDim,conformingTraces);
  testSaveAndLoad2D(form.bf(), out, success);
}

TEUCHOS_UNIT_TEST( Mesh, SaveAndLoadStokesConforming )
{
  int spaceDim = 2;
  bool conformingTraces = true;
  double mu = 1.0;
  StokesVGPFormulation form = StokesVGPFormulation::steadyFormulation(spaceDim,mu,conformingTraces);
  testSaveAndLoad2D(form.bf(), out, success);
}
} // namespace
